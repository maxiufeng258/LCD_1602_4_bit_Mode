
LCD_1602_4_bit_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e0  080036e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e8  080036e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000114  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bc7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022eb  00000000  00000000  00030c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00032f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  00033c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a57  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef30  00000000  00000000  00059337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db6d4  00000000  00000000  00068267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014393b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cf8  00000000  00000000  00143990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800361c 	.word	0x0800361c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800361c 	.word	0x0800361c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <LCD1602_usDelay>:
/* #####################################################
 * @brief us delay used for lcd1602
 * @param us: [in] delay time
 */
static void LCD1602_usDelay(uint16_t us)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&LCD1602_timer, 0);
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <LCD1602_usDelay+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&LCD1602_timer) < us);
 80004f6:	bf00      	nop
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LCD1602_usDelay+0x30>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3f9      	bcc.n	80004f8 <LCD1602_usDelay+0x14>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	200000e0 	.word	0x200000e0

08000518 <LCD1602_Send_Data_Cmd>:
 * @brief write data or command to LCD1602
 * @param data: [in] data or cmd	length is 4bit
 * @param Data_or_Cmd: [in] 1: data    0: command  -> RS_pin
 */
static void LCD1602_Send_Data_Cmd(uint8_t data, dataorcmd_flag_TypeDef Data_or_Cmd_flag)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD1602_RS_GPIO_Port, LCD1602_RS_Pin, Data_or_Cmd_flag);
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	4822      	ldr	r0, [pc, #136]	; (80005bc <LCD1602_Send_Data_Cmd+0xa4>)
 8000532:	f000 ffdf 	bl	80014f4 <HAL_GPIO_WritePin>

	/* write data/cmd to GPIO_Pin Dx */
	HAL_GPIO_WritePin(LCD1602_D7_GPIO_Port, LCD1602_D7_Pin, ((data>>3)&0x01));
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	08db      	lsrs	r3, r3, #3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	481c      	ldr	r0, [pc, #112]	; (80005bc <LCD1602_Send_Data_Cmd+0xa4>)
 800054a:	f000 ffd3 	bl	80014f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD1602_D6_GPIO_Port, LCD1602_D6_Pin, ((data>>2)&0x01));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	2104      	movs	r1, #4
 800055e:	4818      	ldr	r0, [pc, #96]	; (80005c0 <LCD1602_Send_Data_Cmd+0xa8>)
 8000560:	f000 ffc8 	bl	80014f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD1602_D5_GPIO_Port, LCD1602_D5_Pin, ((data>>1)&0x01));
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	085b      	lsrs	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <LCD1602_Send_Data_Cmd+0xa4>)
 8000578:	f000 ffbc 	bl	80014f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD1602_D4_GPIO_Port, LCD1602_D4_Pin, ((data>>0)&0x01));
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <LCD1602_Send_Data_Cmd+0xac>)
 800058c:	f000 ffb2 	bl	80014f4 <HAL_GPIO_WritePin>

	/* set EN_Pin to 1, send the data */
	HAL_GPIO_WritePin(LCD1602_EN_GPIO_Port, LCD1602_EN_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4809      	ldr	r0, [pc, #36]	; (80005bc <LCD1602_Send_Data_Cmd+0xa4>)
 8000598:	f000 ffac 	bl	80014f4 <HAL_GPIO_WritePin>
	/* if the HCLK > 100MHz, use 20 us delay
	 * if the LCD still doesn't work, increase the delay to 50 80 or 100 us */
	LCD1602_usDelay(20);
 800059c:	2014      	movs	r0, #20
 800059e:	f7ff ffa1 	bl	80004e4 <LCD1602_usDelay>
	HAL_GPIO_WritePin(LCD1602_EN_GPIO_Port, LCD1602_EN_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <LCD1602_Send_Data_Cmd+0xa4>)
 80005aa:	f000 ffa3 	bl	80014f4 <HAL_GPIO_WritePin>
	LCD1602_usDelay(20);
 80005ae:	2014      	movs	r0, #20
 80005b0:	f7ff ff98 	bl	80004e4 <LCD1602_usDelay>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40020800 	.word	0x40020800
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	40020400 	.word	0x40020400

080005c8 <LCD1602_Write_Cmd>:
/* #####################################################
 * @brief write cmd to lcd1602
 * @param cmd: [in] command byte
 */
void LCD1602_Write_Cmd(uint8_t cmd)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint8_t datatosend;

	/* send upper 4bit */
	datatosend = (cmd >> 4) & 0x0F;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	091b      	lsrs	r3, r3, #4
 80005d6:	73fb      	strb	r3, [r7, #15]
	LCD1602_Send_Data_Cmd(datatosend, flag_cmd);
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff9b 	bl	8000518 <LCD1602_Send_Data_Cmd>

	/* send lower 4bit */
	datatosend = cmd & 0x0f;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	LCD1602_Send_Data_Cmd(datatosend, flag_cmd);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff92 	bl	8000518 <LCD1602_Send_Data_Cmd>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LCD1602_Write_Data>:
/* #####################################################
 * @brief write data to LCD1602
 * @param data: [in] data byte
 */
void LCD1602_Write_Data(uint8_t data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t datatosend;

	/* send upper 4bit */
	datatosend = (data >> 4) & 0x0F;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	73fb      	strb	r3, [r7, #15]
	LCD1602_Send_Data_Cmd(datatosend, flag_data);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff81 	bl	8000518 <LCD1602_Send_Data_Cmd>

	/* send lower 4bit */
	datatosend = data & 0x0f;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 030f 	and.w	r3, r3, #15
 800061c:	73fb      	strb	r3, [r7, #15]
	LCD1602_Send_Data_Cmd(datatosend, flag_data);
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2101      	movs	r1, #1
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff78 	bl	8000518 <LCD1602_Send_Data_Cmd>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <LCD1602_Clear>:

/* #####################################################
 * @brief clear LCD1602
 */
void LCD1602_Clear(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	LCD1602_Write_Cmd(0x01);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ffc7 	bl	80005c8 <LCD1602_Write_Cmd>
	LCD1602_usDelay(2);
 800063a:	2002      	movs	r0, #2
 800063c:	f7ff ff52 	bl	80004e4 <LCD1602_usDelay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <LCD1602_Set_Cursor>:
 * @brief set cursor position (row, col)
 * @param row: [in] row value [0,1]
 * @param col: [in] col value [0,1,2,3,4....,15]
 */
void LCD1602_Set_Cursor(uint8_t row, uint8_t col)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	if (col < 0 || col > 15)
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	2b0f      	cmp	r3, #15
 8000658:	d901      	bls.n	800065e <LCD1602_Set_Cursor+0x1a>
		col = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <LCD1602_Set_Cursor+0x26>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d005      	beq.n	8000674 <LCD1602_Set_Cursor+0x30>
 8000668:	e009      	b.n	800067e <LCD1602_Set_Cursor+0x3a>
		case 0:
			col |= 0x80;
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000670:	71bb      	strb	r3, [r7, #6]
			break;
 8000672:	e009      	b.n	8000688 <LCD1602_Set_Cursor+0x44>
		case 1:
			col |= 0xC0;
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800067a:	71bb      	strb	r3, [r7, #6]
			break;
 800067c:	e004      	b.n	8000688 <LCD1602_Set_Cursor+0x44>
		default:
			col |= 0x80;
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000684:	71bb      	strb	r3, [r7, #6]
			break;
 8000686:	bf00      	nop
	}

	LCD1602_Write_Cmd(col);
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff9c 	bl	80005c8 <LCD1602_Write_Cmd>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LCD1602_Init>:

/* #####################################################
 * @brief initialization and configuration LCD1602
 */
void LCD1602_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	/* start timers */
	HAL_TIM_Base_Start(&LCD1602_timer);
 800069c:	481d      	ldr	r0, [pc, #116]	; (8000714 <LCD1602_Init+0x7c>)
 800069e:	f001 fc77 	bl	8001f90 <HAL_TIM_Base_Start>

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006a2:	2032      	movs	r0, #50	; 0x32
 80006a4:	f000 fc74 	bl	8000f90 <HAL_Delay>
	LCD1602_Write_Cmd (0x30);
 80006a8:	2030      	movs	r0, #48	; 0x30
 80006aa:	f7ff ff8d 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 fc6e 	bl	8000f90 <HAL_Delay>
	LCD1602_Write_Cmd (0x30);
 80006b4:	2030      	movs	r0, #48	; 0x30
 80006b6:	f7ff ff87 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(1);  // wait for >100us
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fc68 	bl	8000f90 <HAL_Delay>
	LCD1602_Write_Cmd (0x30);
 80006c0:	2030      	movs	r0, #48	; 0x30
 80006c2:	f7ff ff81 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fc62 	bl	8000f90 <HAL_Delay>
	LCD1602_Write_Cmd (0x20);  // 4bit mode
 80006cc:	2020      	movs	r0, #32
 80006ce:	f7ff ff7b 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 fc5c 	bl	8000f90 <HAL_Delay>

	/* display initialization
	 * function set -> DL=0(4bit mode), N = 1(2 line display) F=0(5x8 characters) */
	LCD1602_Write_Cmd(0x28);
 80006d8:	2028      	movs	r0, #40	; 0x28
 80006da:	f7ff ff75 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fc56 	bl	8000f90 <HAL_Delay>
	/* display on/off control -> D=0,C=0,B=0  -> display off */
	LCD1602_Write_Cmd(0x08);
 80006e4:	2008      	movs	r0, #8
 80006e6:	f7ff ff6f 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fc50 	bl	8000f90 <HAL_Delay>
	/* clear lcd display */
	LCD1602_Write_Cmd(0x01);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ff69 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(2);
 80006f6:	2002      	movs	r0, #2
 80006f8:	f000 fc4a 	bl	8000f90 <HAL_Delay>
	/* entry mode set -> I/D=1(increment cursor) & S = 0 (no shift) */
	LCD1602_Write_Cmd(0x06);
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff ff63 	bl	80005c8 <LCD1602_Write_Cmd>
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fc44 	bl	8000f90 <HAL_Delay>
	/* display on/off control -> D=1, C and B = 0.(Cursor and blink, last two bits) */
	LCD1602_Write_Cmd(0x0C);
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff5d 	bl	80005c8 <LCD1602_Write_Cmd>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000e0 	.word	0x200000e0

08000718 <LCD1602_Write_String>:
/* #####################################################
 * @brief write string data to LCD1602 display
 * 		based on LCD1602_Write_Data()
 */
void LCD1602_Write_String(char *str)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000720:	e006      	b.n	8000730 <LCD1602_Write_String+0x18>
	{
		LCD1602_Write_Data(*str++);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff66 	bl	80005fc <LCD1602_Write_Data>
	while (*str)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f4      	bne.n	8000722 <LCD1602_Write_String+0xa>
	}
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <_write+0x24>)
 800075a:	f001 ff9e 	bl	800269a <HAL_UART_Transmit>
	return len;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000009c 	.word	0x2000009c

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fbcc 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f84a 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f918 	bl	80009ac <MX_GPIO_Init>
  MX_TIM6_Init();
 800077c:	f000 f8b6 	bl	80008ec <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000780:	f000 f8ea 	bl	8000958 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD1602_Init();
 8000784:	f7ff ff88 	bl	8000698 <LCD1602_Init>
  LCD1602_Set_Cursor(0, 0);
 8000788:	2100      	movs	r1, #0
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff5a 	bl	8000644 <LCD1602_Set_Cursor>
  LCD1602_Write_String("init ok 123.");
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <main+0x8c>)
 8000792:	f7ff ffc1 	bl	8000718 <LCD1602_Write_String>

  LCD1602_Set_Cursor(1, 4);
 8000796:	2104      	movs	r1, #4
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff ff53 	bl	8000644 <LCD1602_Set_Cursor>
  LCD1602_Write_String("12:45:21");
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <main+0x90>)
 80007a0:	f7ff ffba 	bl	8000718 <LCD1602_Write_String>

  HAL_Delay(4000);
 80007a4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80007a8:	f000 fbf2 	bl	8000f90 <HAL_Delay>
  LCD1602_Clear();
 80007ac:	f7ff ff40 	bl	8000630 <LCD1602_Clear>

  printf("init succeed...\r\n");
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <main+0x94>)
 80007b2:	f002 fadb 	bl	8002d6c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 80007b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <main+0x98>)
 80007bc:	f000 feb3 	bl	8001526 <HAL_GPIO_TogglePin>
	  HAL_Delay(400);
 80007c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007c4:	f000 fbe4 	bl	8000f90 <HAL_Delay>
	  {
		  LCD1602_Set_Cursor(0, 8);
 80007c8:	2108      	movs	r1, #8
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff3a 	bl	8000644 <LCD1602_Set_Cursor>

		  LCD1602_Write_Data(num + '0');
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <main+0x9c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3330      	adds	r3, #48	; 0x30
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff0f 	bl	80005fc <LCD1602_Write_Data>

		  if (num++ == 26+26+10)
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <main+0x9c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	b2d1      	uxtb	r1, r2
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <main+0x9c>)
 80007e8:	7011      	strb	r1, [r2, #0]
 80007ea:	2b3e      	cmp	r3, #62	; 0x3e
 80007ec:	d1e3      	bne.n	80007b6 <main+0x4a>
			  num = 0;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <main+0x9c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 80007f4:	e7df      	b.n	80007b6 <main+0x4a>
 80007f6:	bf00      	nop
 80007f8:	08003634 	.word	0x08003634
 80007fc:	08003644 	.word	0x08003644
 8000800:	08003650 	.word	0x08003650
 8000804:	40021c00 	.word	0x40021c00
 8000808:	2000008c 	.word	0x2000008c

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fa30 	bl	8002c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <SystemClock_Config+0xd8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <SystemClock_Config+0xd8>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xd8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xdc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <SystemClock_Config+0xdc>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <SystemClock_Config+0xdc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800087c:	230f      	movs	r3, #15
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000880:	23d8      	movs	r3, #216	; 0xd8
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f000 feb3 	bl	80015fc <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800089c:	f000 f94a 	bl	8000b34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a0:	f000 fe5c 	bl	800155c <HAL_PWREx_EnableOverDrive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008aa:	f000 f943 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2105      	movs	r1, #5
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f90d 	bl	8001aec <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008d8:	f000 f92c 	bl	8000b34 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM6_Init+0x64>)
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_TIM6_Init+0x68>)
 80008fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_TIM6_Init+0x64>)
 8000902:	2259      	movs	r2, #89	; 0x59
 8000904:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_TIM6_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_TIM6_Init+0x64>)
 800090e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000912:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_TIM6_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_TIM6_Init+0x64>)
 800091c:	f001 fae8 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000926:	f000 f905 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_TIM6_Init+0x64>)
 8000938:	f001 fdd2 	bl	80024e0 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000942:	f000 f8f7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000e0 	.word	0x200000e0
 8000954:	40001000 	.word	0x40001000

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f001 fe36 	bl	8002600 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f8cb 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000009c 	.word	0x2000009c
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <MX_GPIO_Init+0x150>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <MX_GPIO_Init+0x150>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <MX_GPIO_Init+0x150>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <MX_GPIO_Init+0x150>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a45      	ldr	r2, [pc, #276]	; (8000afc <MX_GPIO_Init+0x150>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b43      	ldr	r3, [pc, #268]	; (8000afc <MX_GPIO_Init+0x150>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a3e      	ldr	r2, [pc, #248]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a37      	ldr	r2, [pc, #220]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a30      	ldr	r2, [pc, #192]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <MX_GPIO_Init+0x150>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1602_D4_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000a54:	482a      	ldr	r0, [pc, #168]	; (8000b00 <MX_GPIO_Init+0x154>)
 8000a56:	f000 fd4d 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000a60:	4828      	ldr	r0, [pc, #160]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000a62:	f000 fd47 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1602_RS_Pin|LCD1602_RW_Pin|LCD1602_EN_Pin|LCD1602_D5_Pin
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000a6c:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_GPIO_Init+0x15c>)
 8000a6e:	f000 fd41 	bl	80014f4 <HAL_GPIO_WritePin>
                          |LCD1602_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD1602_D6_GPIO_Port, LCD1602_D6_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2104      	movs	r1, #4
 8000a76:	4825      	ldr	r0, [pc, #148]	; (8000b0c <MX_GPIO_Init+0x160>)
 8000a78:	f000 fd3c 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD1602_D4_Pin PB13 */
  GPIO_InitStruct.Pin = LCD1602_D4_Pin|GPIO_PIN_13;
 8000a7c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <MX_GPIO_Init+0x154>)
 8000a96:	f000 fb81 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 8000a9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_GPIO_Init+0x158>)
 8000ab4:	f000 fb72 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1602_RS_Pin LCD1602_RW_Pin LCD1602_EN_Pin LCD1602_D5_Pin
                           LCD1602_D7_Pin */
  GPIO_InitStruct.Pin = LCD1602_RS_Pin|LCD1602_RW_Pin|LCD1602_EN_Pin|LCD1602_D5_Pin
 8000ab8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000abc:	617b      	str	r3, [r7, #20]
                          |LCD1602_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_GPIO_Init+0x15c>)
 8000ad2:	f000 fb63 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD1602_D6_Pin */
  GPIO_InitStruct.Pin = LCD1602_D6_Pin;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD1602_D6_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <MX_GPIO_Init+0x160>)
 8000aee:	f000 fb55 	bl	800119c <HAL_GPIO_Init>

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40021c00 	.word	0x40021c00
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 fa15 	bl	8000f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40001400 	.word	0x40001400

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_TIM_Base_MspInit+0x3c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10d      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_TIM_Base_MspInit+0x40>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_TIM_Base_MspInit+0x40>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_TIM_Base_MspInit+0x40>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40001000 	.word	0x40001000
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12c      	bne.n	8000c50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c40:	2307      	movs	r3, #7
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4c:	f000 faa6 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2037      	movs	r0, #55	; 0x37
 8000c7a:	f000 fa65 	bl	8001148 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c7e:	2037      	movs	r0, #55	; 0x37
 8000c80:	f000 fa7e 	bl	8001180 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 f8ee 	bl	8001e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cb0:	f001 f8c4 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_InitTick+0xa8>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_InitTick+0xac>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_InitTick+0xb0>)
 8000ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_InitTick+0xac>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_InitTick+0xac>)
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_InitTick+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_InitTick+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_InitTick+0xac>)
 8000cea:	f001 f901 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_InitTick+0xac>)
 8000cf6:	f001 f9b3 	bl	8002060 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	20000128 	.word	0x20000128
 8000d14:	40001400 	.word	0x40001400

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM7_IRQHandler+0x10>)
 8000d76:	f001 f9e3 	bl	8002140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000128 	.word	0x20000128

08000d84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
	}

return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f001 fee8 	bl	8002c2c <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20030000 	.word	0x20030000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	20000188 	.word	0x20000188

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f001 fea7 	bl	8002c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fc3f 	bl	800076c <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ef0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000efc:	080036f0 	.word	0x080036f0
  ldr r2, =_sbss
 8000f00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f04:	20000184 	.word	0x20000184

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f8fc 	bl	8001132 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f7ff fe92 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fdfe 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000170 	.word	0x20000170

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000170 	.word	0x20000170

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff4c 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115a:	f7ff ff61 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800115e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ffb1 	bl	80010cc <NVIC_EncodePriority>
 800116a:	4602      	mov	r2, r0
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff80 	bl	8001078 <__NVIC_SetPriority>
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff54 	bl	800103c <__NVIC_EnableIRQ>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e177      	b.n	80014a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 8166 	bne.w	80014a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80c0 	beq.w	80014a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_GPIO_Init+0x324>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a61      	ldr	r2, [pc, #388]	; (80014c4 <HAL_GPIO_Init+0x328>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d037      	beq.n	80013da <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a57      	ldr	r2, [pc, #348]	; (80014cc <HAL_GPIO_Init+0x330>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d031      	beq.n	80013d6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a56      	ldr	r2, [pc, #344]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d02b      	beq.n	80013d2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <HAL_GPIO_Init+0x338>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d025      	beq.n	80013ce <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a54      	ldr	r2, [pc, #336]	; (80014d8 <HAL_GPIO_Init+0x33c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a53      	ldr	r2, [pc, #332]	; (80014dc <HAL_GPIO_Init+0x340>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x22a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_GPIO_Init+0x344>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a51      	ldr	r2, [pc, #324]	; (80014e4 <HAL_GPIO_Init+0x348>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x222>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_GPIO_Init+0x34c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <HAL_GPIO_Init+0x350>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x21a>
 80013b2:	2309      	movs	r3, #9
 80013b4:	e012      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013b6:	230a      	movs	r3, #10
 80013b8:	e010      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013ba:	2308      	movs	r3, #8
 80013bc:	e00e      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013be:	2307      	movs	r3, #7
 80013c0:	e00c      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00a      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x328>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_GPIO_Init+0x354>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141e:	4a34      	ldr	r2, [pc, #208]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001424:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001448:	4a29      	ldr	r2, [pc, #164]	; (80014f0 <HAL_GPIO_Init+0x354>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x354>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x354>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f ae84 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021800 	.word	0x40021800
 80014e4:	40021c00 	.word	0x40021c00
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40022400 	.word	0x40022400
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001538:	887a      	ldrh	r2, [r7, #2]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43d9      	mvns	r1, r3
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	400b      	ands	r3, r1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_PWREx_EnableOverDrive+0x90>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_PWREx_EnableOverDrive+0x90>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_PWREx_EnableOverDrive+0x90>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001588:	f7ff fcf6 	bl	8000f78 <HAL_GetTick>
 800158c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800158e:	e009      	b.n	80015a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001590:	f7ff fcf2 	bl	8000f78 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800159e:	d901      	bls.n	80015a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e01f      	b.n	80015e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d1ee      	bne.n	8001590 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b8:	f7ff fcde 	bl	8000f78 <HAL_GetTick>
 80015bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015be:	e009      	b.n	80015d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015c0:	f7ff fcda 	bl	8000f78 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ce:	d901      	bls.n	80015d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e007      	b.n	80015e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e0:	d1ee      	bne.n	80015c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	420e0040 	.word	0x420e0040
 80015f4:	40007000 	.word	0x40007000
 80015f8:	420e0044 	.word	0x420e0044

080015fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e264      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d075      	beq.n	8001706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161a:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b04      	cmp	r3, #4
 8001624:	d00c      	beq.n	8001640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4ba0      	ldr	r3, [pc, #640]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162e:	2b08      	cmp	r3, #8
 8001630:	d112      	bne.n	8001658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001632:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163e:	d10b      	bne.n	8001658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05b      	beq.n	8001704 <HAL_RCC_OscConfig+0x108>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d157      	bne.n	8001704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e23f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x74>
 8001662:	4b91      	ldr	r3, [pc, #580]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a90      	ldr	r2, [pc, #576]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xb0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x98>
 800167a:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a8a      	ldr	r2, [pc, #552]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a87      	ldr	r2, [pc, #540]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xb0>
 8001694:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a83      	ldr	r2, [pc, #524]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a80      	ldr	r2, [pc, #512]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc60 	bl	8000f78 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fc5c 	bl	8000f78 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e204      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xc0>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc4c 	bl	8000f78 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fc48 	bl	8000f78 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1f0      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0xe8>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d063      	beq.n	80017da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001726:	2b08      	cmp	r3, #8
 8001728:	d11c      	bne.n	8001764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x152>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e1c4      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4952      	ldr	r1, [pc, #328]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	e03a      	b.n	80017da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_OscConfig+0x2b0>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fc01 	bl	8000f78 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fbfd 	bl	8000f78 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1a5      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4940      	ldr	r1, [pc, #256]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_OscConfig+0x2b0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fbe0 	bl	8000f78 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017bc:	f7ff fbdc 	bl	8000f78 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e184      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d030      	beq.n	8001848 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d016      	beq.n	800181c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x2b4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fbc0 	bl	8000f78 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fbbc 	bl	8000f78 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e164      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x200>
 800181a:	e015      	b.n	8001848 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x2b4>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fba9 	bl	8000f78 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff fba5 	bl	8000f78 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e14d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a0 	beq.w	8001996 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x2b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d121      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_RCC_OscConfig+0x2b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_RCC_OscConfig+0x2b8>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fb6b 	bl	8000f78 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e011      	b.n	80018ca <HAL_RCC_OscConfig+0x2ce>
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	42470000 	.word	0x42470000
 80018b0:	42470e80 	.word	0x42470e80
 80018b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7ff fb5e 	bl	8000f78 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e106      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_RCC_OscConfig+0x4e4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x2f0>
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a80      	ldr	r2, [pc, #512]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e01c      	b.n	8001926 <HAL_RCC_OscConfig+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x312>
 80018f4:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a7a      	ldr	r2, [pc, #488]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a77      	ldr	r2, [pc, #476]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0x32a>
 800190e:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a74      	ldr	r2, [pc, #464]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a71      	ldr	r2, [pc, #452]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fb23 	bl	8000f78 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff fb1f 	bl	8000f78 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0c5      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ee      	beq.n	8001936 <HAL_RCC_OscConfig+0x33a>
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fb0d 	bl	8000f78 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fb09 	bl	8000f78 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0af      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 809b 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d05c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d141      	bne.n	8001a38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fadd 	bl	8000f78 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fad9 	bl	8000f78 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e081      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69da      	ldr	r2, [r3, #28]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	019b      	lsls	r3, r3, #6
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	085b      	lsrs	r3, r3, #1
 80019f8:	3b01      	subs	r3, #1
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	061b      	lsls	r3, r3, #24
 8001a04:	4937      	ldr	r1, [pc, #220]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_OscConfig+0x4ec>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fab2 	bl	8000f78 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff faae 	bl	8000f78 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e056      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x41c>
 8001a36:	e04e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_RCC_OscConfig+0x4ec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fa9b 	bl	8000f78 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff fa97 	bl	8000f78 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e03f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x44a>
 8001a64:	e037      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e032      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d028      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d11a      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d111      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	42470060 	.word	0x42470060

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0cc      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d90c      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b8      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	494d      	ldr	r1, [pc, #308]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d044      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d119      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e067      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 0203 	bic.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f9cc 	bl	8000f78 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7ff f9c8 	bl	8000f78 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e04f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 020c 	and.w	r2, r3, #12
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1eb      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d20c      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e032      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4916      	ldr	r1, [pc, #88]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f821 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ffe6 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08003664 	.word	0x08003664
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	6079      	str	r1, [r7, #4]
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	60f9      	str	r1, [r7, #12]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cca:	2100      	movs	r1, #0
 8001ccc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cce:	4952      	ldr	r1, [pc, #328]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cd0:	6889      	ldr	r1, [r1, #8]
 8001cd2:	f001 010c 	and.w	r1, r1, #12
 8001cd6:	2908      	cmp	r1, #8
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001cda:	2908      	cmp	r1, #8
 8001cdc:	f200 8094 	bhi.w	8001e08 <HAL_RCC_GetSysClockFreq+0x150>
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x32>
 8001ce4:	2904      	cmp	r1, #4
 8001ce6:	d003      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x38>
 8001ce8:	e08e      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x164>)
 8001cec:	60bb      	str	r3, [r7, #8]
       break;
 8001cee:	e08e      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x168>)
 8001cf2:	60bb      	str	r3, [r7, #8]
      break;
 8001cf4:	e08b      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf6:	4948      	ldr	r1, [pc, #288]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cf8:	6849      	ldr	r1, [r1, #4]
 8001cfa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001cfe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d00:	4945      	ldr	r1, [pc, #276]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d02:	6849      	ldr	r1, [r1, #4]
 8001d04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	d024      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4942      	ldr	r1, [pc, #264]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d0e:	6849      	ldr	r1, [r1, #4]
 8001d10:	0989      	lsrs	r1, r1, #6
 8001d12:	4608      	mov	r0, r1
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d1c:	f04f 0500 	mov.w	r5, #0
 8001d20:	ea00 0204 	and.w	r2, r0, r4
 8001d24:	ea01 0305 	and.w	r3, r1, r5
 8001d28:	493d      	ldr	r1, [pc, #244]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d2a:	fb01 f003 	mul.w	r0, r1, r3
 8001d2e:	2100      	movs	r1, #0
 8001d30:	fb01 f102 	mul.w	r1, r1, r2
 8001d34:	1844      	adds	r4, r0, r1
 8001d36:	493a      	ldr	r1, [pc, #232]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d38:	fba2 0101 	umull	r0, r1, r2, r1
 8001d3c:	1863      	adds	r3, r4, r1
 8001d3e:	4619      	mov	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	f7fe fa50 	bl	80001ec <__aeabi_uldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4613      	mov	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e04a      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	ea02 0400 	and.w	r4, r2, r0
 8001d6e:	ea03 0501 	and.w	r5, r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	014b      	lsls	r3, r1, #5
 8001d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d84:	0142      	lsls	r2, r0, #5
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	1b00      	subs	r0, r0, r4
 8001d8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	018b      	lsls	r3, r1, #6
 8001d9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d9e:	0182      	lsls	r2, r0, #6
 8001da0:	1a12      	subs	r2, r2, r0
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	f04f 0000 	mov.w	r0, #0
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	00d9      	lsls	r1, r3, #3
 8001db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db4:	00d0      	lsls	r0, r2, #3
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	1912      	adds	r2, r2, r4
 8001dbc:	eb45 0303 	adc.w	r3, r5, r3
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0299      	lsls	r1, r3, #10
 8001dca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dce:	0290      	lsls	r0, r2, #10
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f7fe fa04 	bl	80001ec <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	0c1b      	lsrs	r3, r3, #16
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	60bb      	str	r3, [r7, #8]
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x164>)
 8001e0a:	60bb      	str	r3, [r7, #8]
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bdb0      	pop	{r4, r5, r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	017d7840 	.word	0x017d7840

08001e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a9b      	lsrs	r3, r3, #10
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	08003674 	.word	0x08003674

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffdc 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08003674 	.word	0x08003674

08001e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	220f      	movs	r2, #15
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_GetClockConfig+0x60>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e041      	b.n	8001f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fe3a 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 fa36 	bl	80023a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d001      	beq.n	8001fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e046      	b.n	8002036 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_TIM_Base_Start+0xb4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc2:	d01d      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_TIM_Base_Start+0xb8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_TIM_Base_Start+0xbc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_TIM_Base_Start+0xc0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_TIM_Base_Start+0xc4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	; (8002058 <HAL_TIM_Base_Start+0xc8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_TIM_Base_Start+0x70>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_TIM_Base_Start+0xcc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d111      	bne.n	8002024 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d010      	beq.n	8002034 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	e007      	b.n	8002034 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	40000400 	.word	0x40000400
 800204c:	40000800 	.word	0x40000800
 8002050:	40000c00 	.word	0x40000c00
 8002054:	40010400 	.word	0x40010400
 8002058:	40014000 	.word	0x40014000
 800205c:	40001800 	.word	0x40001800

08002060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e04e      	b.n	8002116 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_TIM_Base_Start_IT+0xc4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d022      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d01d      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_TIM_Base_Start_IT+0xc8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d018      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1e      	ldr	r2, [pc, #120]	; (800212c <HAL_TIM_Base_Start_IT+0xcc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_TIM_Base_Start_IT+0xd0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00e      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_TIM_Base_Start_IT+0xd4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_TIM_Base_Start_IT+0xd8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_TIM_Base_Start_IT+0x80>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_TIM_Base_Start_IT+0xdc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d111      	bne.n	8002104 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d010      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002102:	e007      	b.n	8002114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800
 8002130:	40000c00 	.word	0x40000c00
 8002134:	40010400 	.word	0x40010400
 8002138:	40014000 	.word	0x40014000
 800213c:	40001800 	.word	0x40001800

08002140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b02      	cmp	r3, #2
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0202 	mvn.w	r2, #2
 800216c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8ee 	bl	8002364 <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8e0 	bl	8002350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8f1 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0204 	mvn.w	r2, #4
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8c4 	bl	8002364 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8b6 	bl	8002350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8c7 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b08      	cmp	r3, #8
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0208 	mvn.w	r2, #8
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2204      	movs	r2, #4
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f89a 	bl	8002364 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f88c 	bl	8002350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f89d 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b10      	cmp	r3, #16
 8002250:	d122      	bne.n	8002298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b10      	cmp	r3, #16
 800225e:	d11b      	bne.n	8002298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0210 	mvn.w	r2, #16
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2208      	movs	r2, #8
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f870 	bl	8002364 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f862 	bl	8002350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f873 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10e      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0201 	mvn.w	r2, #1
 80022bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fc26 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ce:	2b80      	cmp	r3, #128	; 0x80
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f97e 	bl	80025ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d107      	bne.n	800231c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f838 	bl	800238c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b20      	cmp	r3, #32
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b20      	cmp	r3, #32
 8002336:	d107      	bne.n	8002348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0220 	mvn.w	r2, #32
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f948 	bl	80025d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <TIM_Base_SetConfig+0x114>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d00f      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <TIM_Base_SetConfig+0x118>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00b      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <TIM_Base_SetConfig+0x11c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <TIM_Base_SetConfig+0x120>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <TIM_Base_SetConfig+0x124>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d108      	bne.n	80023f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2f      	ldr	r2, [pc, #188]	; (80024b4 <TIM_Base_SetConfig+0x114>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d027      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <TIM_Base_SetConfig+0x118>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d023      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <TIM_Base_SetConfig+0x11c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01f      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <TIM_Base_SetConfig+0x120>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01b      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <TIM_Base_SetConfig+0x124>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d017      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <TIM_Base_SetConfig+0x128>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <TIM_Base_SetConfig+0x12c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00f      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <TIM_Base_SetConfig+0x130>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00b      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <TIM_Base_SetConfig+0x134>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <TIM_Base_SetConfig+0x138>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d003      	beq.n	8002452 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a23      	ldr	r2, [pc, #140]	; (80024dc <TIM_Base_SetConfig+0x13c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d108      	bne.n	8002464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <TIM_Base_SetConfig+0x114>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0xf8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <TIM_Base_SetConfig+0x124>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d103      	bne.n	80024a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	615a      	str	r2, [r3, #20]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40010400 	.word	0x40010400
 80024c8:	40014000 	.word	0x40014000
 80024cc:	40014400 	.word	0x40014400
 80024d0:	40014800 	.word	0x40014800
 80024d4:	40001800 	.word	0x40001800
 80024d8:	40001c00 	.word	0x40001c00
 80024dc:	40002000 	.word	0x40002000

080024e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e05a      	b.n	80025ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d01d      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d018      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00e      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4313      	orrs	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800
 80025c8:	40000c00 	.word	0x40000c00
 80025cc:	40010400 	.word	0x40010400
 80025d0:	40014000 	.word	0x40014000
 80025d4:	40001800 	.word	0x40001800

080025d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e03f      	b.n	8002692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fad4 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f929 	bl	800289c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b08a      	sub	sp, #40	; 0x28
 800269e:	af02      	add	r7, sp, #8
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d17c      	bne.n	80027b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_UART_Transmit+0x2c>
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e075      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x3e>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e06e      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2221      	movs	r2, #33	; 0x21
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fc43 	bl	8000f78 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	d108      	bne.n	800271c <HAL_UART_Transmit+0x82>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	e003      	b.n	8002724 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800272c:	e02a      	b.n	8002784 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f840 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e036      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	3302      	adds	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e007      	b.n	8002776 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3301      	adds	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1cf      	bne.n	800272e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f810 	bl	80027be <UART_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e006      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b090      	sub	sp, #64	; 0x40
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ce:	e050      	b.n	8002872 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d04c      	beq.n	8002872 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x30>
 80027de:	f7fe fbcb 	bl	8000f78 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d241      	bcs.n	8002872 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280e:	637a      	str	r2, [r7, #52]	; 0x34
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e5      	bne.n	80027ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	613b      	str	r3, [r7, #16]
   return(result);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002842:	623a      	str	r2, [r7, #32]
 8002844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	69f9      	ldr	r1, [r7, #28]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e5      	bne.n	8002822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e00f      	b.n	8002892 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	429a      	cmp	r2, r3
 800288e:	d09f      	beq.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3740      	adds	r7, #64	; 0x40
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a0:	b09f      	sub	sp, #124	; 0x7c
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	68d9      	ldr	r1, [r3, #12]
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	ea40 0301 	orr.w	r3, r0, r1
 80028bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028e0:	f021 010c 	bic.w	r1, r1, #12
 80028e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ea:	430b      	orrs	r3, r1
 80028ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	6999      	ldr	r1, [r3, #24]
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	ea40 0301 	orr.w	r3, r0, r1
 8002904:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4bc5      	ldr	r3, [pc, #788]	; (8002c20 <UART_SetConfig+0x384>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d004      	beq.n	800291a <UART_SetConfig+0x7e>
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4bc3      	ldr	r3, [pc, #780]	; (8002c24 <UART_SetConfig+0x388>)
 8002916:	429a      	cmp	r2, r3
 8002918:	d103      	bne.n	8002922 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800291a:	f7ff faa3 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 800291e:	6778      	str	r0, [r7, #116]	; 0x74
 8002920:	e002      	b.n	8002928 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002922:	f7ff fa8b 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002926:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002930:	f040 80b6 	bne.w	8002aa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002936:	461c      	mov	r4, r3
 8002938:	f04f 0500 	mov.w	r5, #0
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	1891      	adds	r1, r2, r2
 8002942:	6439      	str	r1, [r7, #64]	; 0x40
 8002944:	415b      	adcs	r3, r3
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800294c:	1912      	adds	r2, r2, r4
 800294e:	eb45 0303 	adc.w	r3, r5, r3
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	00d9      	lsls	r1, r3, #3
 800295c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002960:	00d0      	lsls	r0, r2, #3
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	1911      	adds	r1, r2, r4
 8002968:	6639      	str	r1, [r7, #96]	; 0x60
 800296a:	416b      	adcs	r3, r5
 800296c:	667b      	str	r3, [r7, #100]	; 0x64
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	1891      	adds	r1, r2, r2
 800297a:	63b9      	str	r1, [r7, #56]	; 0x38
 800297c:	415b      	adcs	r3, r3
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002984:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002988:	f7fd fc30 	bl	80001ec <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4ba5      	ldr	r3, [pc, #660]	; (8002c28 <UART_SetConfig+0x38c>)
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	011e      	lsls	r6, r3, #4
 800299a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299c:	461c      	mov	r4, r3
 800299e:	f04f 0500 	mov.w	r5, #0
 80029a2:	4622      	mov	r2, r4
 80029a4:	462b      	mov	r3, r5
 80029a6:	1891      	adds	r1, r2, r2
 80029a8:	6339      	str	r1, [r7, #48]	; 0x30
 80029aa:	415b      	adcs	r3, r3
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
 80029ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029b2:	1912      	adds	r2, r2, r4
 80029b4:	eb45 0303 	adc.w	r3, r5, r3
 80029b8:	f04f 0000 	mov.w	r0, #0
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	00d9      	lsls	r1, r3, #3
 80029c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c6:	00d0      	lsls	r0, r2, #3
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	1911      	adds	r1, r2, r4
 80029ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80029d0:	416b      	adcs	r3, r5
 80029d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80029e2:	415b      	adcs	r3, r3
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029ee:	f7fd fbfd 	bl	80001ec <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <UART_SetConfig+0x38c>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	; 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <UART_SetConfig+0x38c>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a18:	441e      	add	r6, r3
 8002a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	1894      	adds	r4, r2, r2
 8002a28:	623c      	str	r4, [r7, #32]
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a32:	1812      	adds	r2, r2, r0
 8002a34:	eb41 0303 	adc.w	r3, r1, r3
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	f04f 0500 	mov.w	r5, #0
 8002a40:	00dd      	lsls	r5, r3, #3
 8002a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a46:	00d4      	lsls	r4, r2, #3
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	1814      	adds	r4, r2, r0
 8002a4e:	653c      	str	r4, [r7, #80]	; 0x50
 8002a50:	414b      	adcs	r3, r1
 8002a52:	657b      	str	r3, [r7, #84]	; 0x54
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	1891      	adds	r1, r2, r2
 8002a60:	61b9      	str	r1, [r7, #24]
 8002a62:	415b      	adcs	r3, r3
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a6e:	f7fd fbbd 	bl	80001ec <__aeabi_uldivmod>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4b6c      	ldr	r3, [pc, #432]	; (8002c28 <UART_SetConfig+0x38c>)
 8002a78:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	2164      	movs	r1, #100	; 0x64
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	3332      	adds	r3, #50	; 0x32
 8002a8a:	4a67      	ldr	r2, [pc, #412]	; (8002c28 <UART_SetConfig+0x38c>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	f003 0207 	and.w	r2, r3, #7
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4432      	add	r2, r6
 8002a9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a9e:	e0b9      	b.n	8002c14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa2:	461c      	mov	r4, r3
 8002aa4:	f04f 0500 	mov.w	r5, #0
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	462b      	mov	r3, r5
 8002aac:	1891      	adds	r1, r2, r2
 8002aae:	6139      	str	r1, [r7, #16]
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ab8:	1912      	adds	r2, r2, r4
 8002aba:	eb45 0303 	adc.w	r3, r5, r3
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	00d9      	lsls	r1, r3, #3
 8002ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002acc:	00d0      	lsls	r0, r2, #3
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	eb12 0804 	adds.w	r8, r2, r4
 8002ad6:	eb43 0905 	adc.w	r9, r3, r5
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	008b      	lsls	r3, r1, #2
 8002aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002af2:	0082      	lsls	r2, r0, #2
 8002af4:	4640      	mov	r0, r8
 8002af6:	4649      	mov	r1, r9
 8002af8:	f7fd fb78 	bl	80001ec <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <UART_SetConfig+0x38c>)
 8002b02:	fba3 2302 	umull	r2, r3, r3, r2
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	011e      	lsls	r6, r3, #4
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	1894      	adds	r4, r2, r2
 8002b18:	60bc      	str	r4, [r7, #8]
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b22:	1812      	adds	r2, r2, r0
 8002b24:	eb41 0303 	adc.w	r3, r1, r3
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	f04f 0500 	mov.w	r5, #0
 8002b30:	00dd      	lsls	r5, r3, #3
 8002b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b36:	00d4      	lsls	r4, r2, #3
 8002b38:	4622      	mov	r2, r4
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	1814      	adds	r4, r2, r0
 8002b3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b40:	414b      	adcs	r3, r1
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	008b      	lsls	r3, r1, #2
 8002b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b5c:	0082      	lsls	r2, r0, #2
 8002b5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b62:	f7fd fb43 	bl	80001ec <__aeabi_uldivmod>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <UART_SetConfig+0x38c>)
 8002b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	2164      	movs	r1, #100	; 0x64
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	3332      	adds	r3, #50	; 0x32
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <UART_SetConfig+0x38c>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8a:	441e      	add	r6, r3
 8002b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	1894      	adds	r4, r2, r2
 8002b9a:	603c      	str	r4, [r7, #0]
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba4:	1812      	adds	r2, r2, r0
 8002ba6:	eb41 0303 	adc.w	r3, r1, r3
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	f04f 0500 	mov.w	r5, #0
 8002bb2:	00dd      	lsls	r5, r3, #3
 8002bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bb8:	00d4      	lsls	r4, r2, #3
 8002bba:	4622      	mov	r2, r4
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	eb12 0a00 	adds.w	sl, r2, r0
 8002bc2:	eb43 0b01 	adc.w	fp, r3, r1
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	008b      	lsls	r3, r1, #2
 8002bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bde:	0082      	lsls	r2, r0, #2
 8002be0:	4650      	mov	r0, sl
 8002be2:	4659      	mov	r1, fp
 8002be4:	f7fd fb02 	bl	80001ec <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <UART_SetConfig+0x38c>)
 8002bee:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2164      	movs	r1, #100	; 0x64
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <UART_SetConfig+0x38c>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4432      	add	r2, r6
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	377c      	adds	r7, #124	; 0x7c
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	51eb851f 	.word	0x51eb851f

08002c2c <__errno>:
 8002c2c:	4b01      	ldr	r3, [pc, #4]	; (8002c34 <__errno+0x8>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <__libc_init_array>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	4d0d      	ldr	r5, [pc, #52]	; (8002c70 <__libc_init_array+0x38>)
 8002c3c:	4c0d      	ldr	r4, [pc, #52]	; (8002c74 <__libc_init_array+0x3c>)
 8002c3e:	1b64      	subs	r4, r4, r5
 8002c40:	10a4      	asrs	r4, r4, #2
 8002c42:	2600      	movs	r6, #0
 8002c44:	42a6      	cmp	r6, r4
 8002c46:	d109      	bne.n	8002c5c <__libc_init_array+0x24>
 8002c48:	4d0b      	ldr	r5, [pc, #44]	; (8002c78 <__libc_init_array+0x40>)
 8002c4a:	4c0c      	ldr	r4, [pc, #48]	; (8002c7c <__libc_init_array+0x44>)
 8002c4c:	f000 fce6 	bl	800361c <_init>
 8002c50:	1b64      	subs	r4, r4, r5
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	2600      	movs	r6, #0
 8002c56:	42a6      	cmp	r6, r4
 8002c58:	d105      	bne.n	8002c66 <__libc_init_array+0x2e>
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c60:	4798      	blx	r3
 8002c62:	3601      	adds	r6, #1
 8002c64:	e7ee      	b.n	8002c44 <__libc_init_array+0xc>
 8002c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6a:	4798      	blx	r3
 8002c6c:	3601      	adds	r6, #1
 8002c6e:	e7f2      	b.n	8002c56 <__libc_init_array+0x1e>
 8002c70:	080036e8 	.word	0x080036e8
 8002c74:	080036e8 	.word	0x080036e8
 8002c78:	080036e8 	.word	0x080036e8
 8002c7c:	080036ec 	.word	0x080036ec

08002c80 <memset>:
 8002c80:	4402      	add	r2, r0
 8002c82:	4603      	mov	r3, r0
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d100      	bne.n	8002c8a <memset+0xa>
 8002c88:	4770      	bx	lr
 8002c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8e:	e7f9      	b.n	8002c84 <memset+0x4>

08002c90 <_puts_r>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	460e      	mov	r6, r1
 8002c94:	4605      	mov	r5, r0
 8002c96:	b118      	cbz	r0, 8002ca0 <_puts_r+0x10>
 8002c98:	6983      	ldr	r3, [r0, #24]
 8002c9a:	b90b      	cbnz	r3, 8002ca0 <_puts_r+0x10>
 8002c9c:	f000 fa48 	bl	8003130 <__sinit>
 8002ca0:	69ab      	ldr	r3, [r5, #24]
 8002ca2:	68ac      	ldr	r4, [r5, #8]
 8002ca4:	b913      	cbnz	r3, 8002cac <_puts_r+0x1c>
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 fa42 	bl	8003130 <__sinit>
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <_puts_r+0xd0>)
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	d120      	bne.n	8002cf4 <_puts_r+0x64>
 8002cb2:	686c      	ldr	r4, [r5, #4]
 8002cb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cb6:	07db      	lsls	r3, r3, #31
 8002cb8:	d405      	bmi.n	8002cc6 <_puts_r+0x36>
 8002cba:	89a3      	ldrh	r3, [r4, #12]
 8002cbc:	0598      	lsls	r0, r3, #22
 8002cbe:	d402      	bmi.n	8002cc6 <_puts_r+0x36>
 8002cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cc2:	f000 fad3 	bl	800326c <__retarget_lock_acquire_recursive>
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	0719      	lsls	r1, r3, #28
 8002cca:	d51d      	bpl.n	8002d08 <_puts_r+0x78>
 8002ccc:	6923      	ldr	r3, [r4, #16]
 8002cce:	b1db      	cbz	r3, 8002d08 <_puts_r+0x78>
 8002cd0:	3e01      	subs	r6, #1
 8002cd2:	68a3      	ldr	r3, [r4, #8]
 8002cd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60a3      	str	r3, [r4, #8]
 8002cdc:	bb39      	cbnz	r1, 8002d2e <_puts_r+0x9e>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da38      	bge.n	8002d54 <_puts_r+0xc4>
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	210a      	movs	r1, #10
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f000 f848 	bl	8002d7c <__swbuf_r>
 8002cec:	3001      	adds	r0, #1
 8002cee:	d011      	beq.n	8002d14 <_puts_r+0x84>
 8002cf0:	250a      	movs	r5, #10
 8002cf2:	e011      	b.n	8002d18 <_puts_r+0x88>
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <_puts_r+0xd4>)
 8002cf6:	429c      	cmp	r4, r3
 8002cf8:	d101      	bne.n	8002cfe <_puts_r+0x6e>
 8002cfa:	68ac      	ldr	r4, [r5, #8]
 8002cfc:	e7da      	b.n	8002cb4 <_puts_r+0x24>
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <_puts_r+0xd8>)
 8002d00:	429c      	cmp	r4, r3
 8002d02:	bf08      	it	eq
 8002d04:	68ec      	ldreq	r4, [r5, #12]
 8002d06:	e7d5      	b.n	8002cb4 <_puts_r+0x24>
 8002d08:	4621      	mov	r1, r4
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f000 f888 	bl	8002e20 <__swsetup_r>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d0dd      	beq.n	8002cd0 <_puts_r+0x40>
 8002d14:	f04f 35ff 	mov.w	r5, #4294967295
 8002d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d1a:	07da      	lsls	r2, r3, #31
 8002d1c:	d405      	bmi.n	8002d2a <_puts_r+0x9a>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	059b      	lsls	r3, r3, #22
 8002d22:	d402      	bmi.n	8002d2a <_puts_r+0x9a>
 8002d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d26:	f000 faa2 	bl	800326e <__retarget_lock_release_recursive>
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da04      	bge.n	8002d3c <_puts_r+0xac>
 8002d32:	69a2      	ldr	r2, [r4, #24]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dc06      	bgt.n	8002d46 <_puts_r+0xb6>
 8002d38:	290a      	cmp	r1, #10
 8002d3a:	d004      	beq.n	8002d46 <_puts_r+0xb6>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	6022      	str	r2, [r4, #0]
 8002d42:	7019      	strb	r1, [r3, #0]
 8002d44:	e7c5      	b.n	8002cd2 <_puts_r+0x42>
 8002d46:	4622      	mov	r2, r4
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 f817 	bl	8002d7c <__swbuf_r>
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d1bf      	bne.n	8002cd2 <_puts_r+0x42>
 8002d52:	e7df      	b.n	8002d14 <_puts_r+0x84>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	250a      	movs	r5, #10
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	6022      	str	r2, [r4, #0]
 8002d5c:	701d      	strb	r5, [r3, #0]
 8002d5e:	e7db      	b.n	8002d18 <_puts_r+0x88>
 8002d60:	080036a0 	.word	0x080036a0
 8002d64:	080036c0 	.word	0x080036c0
 8002d68:	08003680 	.word	0x08003680

08002d6c <puts>:
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <puts+0xc>)
 8002d6e:	4601      	mov	r1, r0
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	f7ff bf8d 	b.w	8002c90 <_puts_r>
 8002d76:	bf00      	nop
 8002d78:	2000000c 	.word	0x2000000c

08002d7c <__swbuf_r>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	460e      	mov	r6, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	4605      	mov	r5, r0
 8002d84:	b118      	cbz	r0, 8002d8e <__swbuf_r+0x12>
 8002d86:	6983      	ldr	r3, [r0, #24]
 8002d88:	b90b      	cbnz	r3, 8002d8e <__swbuf_r+0x12>
 8002d8a:	f000 f9d1 	bl	8003130 <__sinit>
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <__swbuf_r+0x98>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d12b      	bne.n	8002dec <__swbuf_r+0x70>
 8002d94:	686c      	ldr	r4, [r5, #4]
 8002d96:	69a3      	ldr	r3, [r4, #24]
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	071a      	lsls	r2, r3, #28
 8002d9e:	d52f      	bpl.n	8002e00 <__swbuf_r+0x84>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	b36b      	cbz	r3, 8002e00 <__swbuf_r+0x84>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1ac0      	subs	r0, r0, r3
 8002daa:	6963      	ldr	r3, [r4, #20]
 8002dac:	b2f6      	uxtb	r6, r6
 8002dae:	4283      	cmp	r3, r0
 8002db0:	4637      	mov	r7, r6
 8002db2:	dc04      	bgt.n	8002dbe <__swbuf_r+0x42>
 8002db4:	4621      	mov	r1, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f926 	bl	8003008 <_fflush_r>
 8002dbc:	bb30      	cbnz	r0, 8002e0c <__swbuf_r+0x90>
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	6022      	str	r2, [r4, #0]
 8002dca:	701e      	strb	r6, [r3, #0]
 8002dcc:	6963      	ldr	r3, [r4, #20]
 8002dce:	3001      	adds	r0, #1
 8002dd0:	4283      	cmp	r3, r0
 8002dd2:	d004      	beq.n	8002dde <__swbuf_r+0x62>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d506      	bpl.n	8002de8 <__swbuf_r+0x6c>
 8002dda:	2e0a      	cmp	r6, #10
 8002ddc:	d104      	bne.n	8002de8 <__swbuf_r+0x6c>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f911 	bl	8003008 <_fflush_r>
 8002de6:	b988      	cbnz	r0, 8002e0c <__swbuf_r+0x90>
 8002de8:	4638      	mov	r0, r7
 8002dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <__swbuf_r+0x9c>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d101      	bne.n	8002df6 <__swbuf_r+0x7a>
 8002df2:	68ac      	ldr	r4, [r5, #8]
 8002df4:	e7cf      	b.n	8002d96 <__swbuf_r+0x1a>
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <__swbuf_r+0xa0>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	bf08      	it	eq
 8002dfc:	68ec      	ldreq	r4, [r5, #12]
 8002dfe:	e7ca      	b.n	8002d96 <__swbuf_r+0x1a>
 8002e00:	4621      	mov	r1, r4
 8002e02:	4628      	mov	r0, r5
 8002e04:	f000 f80c 	bl	8002e20 <__swsetup_r>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d0cb      	beq.n	8002da4 <__swbuf_r+0x28>
 8002e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8002e10:	e7ea      	b.n	8002de8 <__swbuf_r+0x6c>
 8002e12:	bf00      	nop
 8002e14:	080036a0 	.word	0x080036a0
 8002e18:	080036c0 	.word	0x080036c0
 8002e1c:	08003680 	.word	0x08003680

08002e20 <__swsetup_r>:
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <__swsetup_r+0xcc>)
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	b125      	cbz	r5, 8002e36 <__swsetup_r+0x16>
 8002e2c:	69ab      	ldr	r3, [r5, #24]
 8002e2e:	b913      	cbnz	r3, 8002e36 <__swsetup_r+0x16>
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f97d 	bl	8003130 <__sinit>
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <__swsetup_r+0xd0>)
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d10f      	bne.n	8002e5c <__swsetup_r+0x3c>
 8002e3c:	686c      	ldr	r4, [r5, #4]
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e44:	0719      	lsls	r1, r3, #28
 8002e46:	d42c      	bmi.n	8002ea2 <__swsetup_r+0x82>
 8002e48:	06dd      	lsls	r5, r3, #27
 8002e4a:	d411      	bmi.n	8002e70 <__swsetup_r+0x50>
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	6033      	str	r3, [r6, #0]
 8002e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	e03e      	b.n	8002eda <__swsetup_r+0xba>
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <__swsetup_r+0xd4>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d101      	bne.n	8002e66 <__swsetup_r+0x46>
 8002e62:	68ac      	ldr	r4, [r5, #8]
 8002e64:	e7eb      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <__swsetup_r+0xd8>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	bf08      	it	eq
 8002e6c:	68ec      	ldreq	r4, [r5, #12]
 8002e6e:	e7e6      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e70:	0758      	lsls	r0, r3, #29
 8002e72:	d512      	bpl.n	8002e9a <__swsetup_r+0x7a>
 8002e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e76:	b141      	cbz	r1, 8002e8a <__swsetup_r+0x6a>
 8002e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e7c:	4299      	cmp	r1, r3
 8002e7e:	d002      	beq.n	8002e86 <__swsetup_r+0x66>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 fa59 	bl	8003338 <_free_r>
 8002e86:	2300      	movs	r3, #0
 8002e88:	6363      	str	r3, [r4, #52]	; 0x34
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6923      	ldr	r3, [r4, #16]
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	b94b      	cbnz	r3, 8002eba <__swsetup_r+0x9a>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d003      	beq.n	8002eba <__swsetup_r+0x9a>
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 f9ff 	bl	80032b8 <__smakebuf_r>
 8002eba:	89a0      	ldrh	r0, [r4, #12]
 8002ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ec0:	f010 0301 	ands.w	r3, r0, #1
 8002ec4:	d00a      	beq.n	8002edc <__swsetup_r+0xbc>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60a3      	str	r3, [r4, #8]
 8002eca:	6963      	ldr	r3, [r4, #20]
 8002ecc:	425b      	negs	r3, r3
 8002ece:	61a3      	str	r3, [r4, #24]
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	b943      	cbnz	r3, 8002ee6 <__swsetup_r+0xc6>
 8002ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ed8:	d1ba      	bne.n	8002e50 <__swsetup_r+0x30>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	0781      	lsls	r1, r0, #30
 8002ede:	bf58      	it	pl
 8002ee0:	6963      	ldrpl	r3, [r4, #20]
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	e7f4      	b.n	8002ed0 <__swsetup_r+0xb0>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e7f7      	b.n	8002eda <__swsetup_r+0xba>
 8002eea:	bf00      	nop
 8002eec:	2000000c 	.word	0x2000000c
 8002ef0:	080036a0 	.word	0x080036a0
 8002ef4:	080036c0 	.word	0x080036c0
 8002ef8:	08003680 	.word	0x08003680

08002efc <__sflush_r>:
 8002efc:	898a      	ldrh	r2, [r1, #12]
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	4605      	mov	r5, r0
 8002f04:	0710      	lsls	r0, r2, #28
 8002f06:	460c      	mov	r4, r1
 8002f08:	d458      	bmi.n	8002fbc <__sflush_r+0xc0>
 8002f0a:	684b      	ldr	r3, [r1, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dc05      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dc02      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d0f9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f22:	2300      	movs	r3, #0
 8002f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f28:	682f      	ldr	r7, [r5, #0]
 8002f2a:	602b      	str	r3, [r5, #0]
 8002f2c:	d032      	beq.n	8002f94 <__sflush_r+0x98>
 8002f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	075a      	lsls	r2, r3, #29
 8002f34:	d505      	bpl.n	8002f42 <__sflush_r+0x46>
 8002f36:	6863      	ldr	r3, [r4, #4]
 8002f38:	1ac0      	subs	r0, r0, r3
 8002f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f3c:	b10b      	cbz	r3, 8002f42 <__sflush_r+0x46>
 8002f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f40:	1ac0      	subs	r0, r0, r3
 8002f42:	2300      	movs	r3, #0
 8002f44:	4602      	mov	r2, r0
 8002f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f48:	6a21      	ldr	r1, [r4, #32]
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	47b0      	blx	r6
 8002f4e:	1c43      	adds	r3, r0, #1
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	d106      	bne.n	8002f62 <__sflush_r+0x66>
 8002f54:	6829      	ldr	r1, [r5, #0]
 8002f56:	291d      	cmp	r1, #29
 8002f58:	d82c      	bhi.n	8002fb4 <__sflush_r+0xb8>
 8002f5a:	4a2a      	ldr	r2, [pc, #168]	; (8003004 <__sflush_r+0x108>)
 8002f5c:	40ca      	lsrs	r2, r1
 8002f5e:	07d6      	lsls	r6, r2, #31
 8002f60:	d528      	bpl.n	8002fb4 <__sflush_r+0xb8>
 8002f62:	2200      	movs	r2, #0
 8002f64:	6062      	str	r2, [r4, #4]
 8002f66:	04d9      	lsls	r1, r3, #19
 8002f68:	6922      	ldr	r2, [r4, #16]
 8002f6a:	6022      	str	r2, [r4, #0]
 8002f6c:	d504      	bpl.n	8002f78 <__sflush_r+0x7c>
 8002f6e:	1c42      	adds	r2, r0, #1
 8002f70:	d101      	bne.n	8002f76 <__sflush_r+0x7a>
 8002f72:	682b      	ldr	r3, [r5, #0]
 8002f74:	b903      	cbnz	r3, 8002f78 <__sflush_r+0x7c>
 8002f76:	6560      	str	r0, [r4, #84]	; 0x54
 8002f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7a:	602f      	str	r7, [r5, #0]
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	d0ca      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f84:	4299      	cmp	r1, r3
 8002f86:	d002      	beq.n	8002f8e <__sflush_r+0x92>
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f000 f9d5 	bl	8003338 <_free_r>
 8002f8e:	2000      	movs	r0, #0
 8002f90:	6360      	str	r0, [r4, #52]	; 0x34
 8002f92:	e7c1      	b.n	8002f18 <__sflush_r+0x1c>
 8002f94:	6a21      	ldr	r1, [r4, #32]
 8002f96:	2301      	movs	r3, #1
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b0      	blx	r6
 8002f9c:	1c41      	adds	r1, r0, #1
 8002f9e:	d1c7      	bne.n	8002f30 <__sflush_r+0x34>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0c4      	beq.n	8002f30 <__sflush_r+0x34>
 8002fa6:	2b1d      	cmp	r3, #29
 8002fa8:	d001      	beq.n	8002fae <__sflush_r+0xb2>
 8002faa:	2b16      	cmp	r3, #22
 8002fac:	d101      	bne.n	8002fb2 <__sflush_r+0xb6>
 8002fae:	602f      	str	r7, [r5, #0]
 8002fb0:	e7b1      	b.n	8002f16 <__sflush_r+0x1a>
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	e7ad      	b.n	8002f18 <__sflush_r+0x1c>
 8002fbc:	690f      	ldr	r7, [r1, #16]
 8002fbe:	2f00      	cmp	r7, #0
 8002fc0:	d0a9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002fc2:	0793      	lsls	r3, r2, #30
 8002fc4:	680e      	ldr	r6, [r1, #0]
 8002fc6:	bf08      	it	eq
 8002fc8:	694b      	ldreq	r3, [r1, #20]
 8002fca:	600f      	str	r7, [r1, #0]
 8002fcc:	bf18      	it	ne
 8002fce:	2300      	movne	r3, #0
 8002fd0:	eba6 0807 	sub.w	r8, r6, r7
 8002fd4:	608b      	str	r3, [r1, #8]
 8002fd6:	f1b8 0f00 	cmp.w	r8, #0
 8002fda:	dd9c      	ble.n	8002f16 <__sflush_r+0x1a>
 8002fdc:	6a21      	ldr	r1, [r4, #32]
 8002fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	463a      	mov	r2, r7
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b0      	blx	r6
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	dc06      	bgt.n	8002ffa <__sflush_r+0xfe>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff2:	81a3      	strh	r3, [r4, #12]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	e78e      	b.n	8002f18 <__sflush_r+0x1c>
 8002ffa:	4407      	add	r7, r0
 8002ffc:	eba8 0800 	sub.w	r8, r8, r0
 8003000:	e7e9      	b.n	8002fd6 <__sflush_r+0xda>
 8003002:	bf00      	nop
 8003004:	20400001 	.word	0x20400001

08003008 <_fflush_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	690b      	ldr	r3, [r1, #16]
 800300c:	4605      	mov	r5, r0
 800300e:	460c      	mov	r4, r1
 8003010:	b913      	cbnz	r3, 8003018 <_fflush_r+0x10>
 8003012:	2500      	movs	r5, #0
 8003014:	4628      	mov	r0, r5
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	b118      	cbz	r0, 8003022 <_fflush_r+0x1a>
 800301a:	6983      	ldr	r3, [r0, #24]
 800301c:	b90b      	cbnz	r3, 8003022 <_fflush_r+0x1a>
 800301e:	f000 f887 	bl	8003130 <__sinit>
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <_fflush_r+0x6c>)
 8003024:	429c      	cmp	r4, r3
 8003026:	d11b      	bne.n	8003060 <_fflush_r+0x58>
 8003028:	686c      	ldr	r4, [r5, #4]
 800302a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ef      	beq.n	8003012 <_fflush_r+0xa>
 8003032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003034:	07d0      	lsls	r0, r2, #31
 8003036:	d404      	bmi.n	8003042 <_fflush_r+0x3a>
 8003038:	0599      	lsls	r1, r3, #22
 800303a:	d402      	bmi.n	8003042 <_fflush_r+0x3a>
 800303c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800303e:	f000 f915 	bl	800326c <__retarget_lock_acquire_recursive>
 8003042:	4628      	mov	r0, r5
 8003044:	4621      	mov	r1, r4
 8003046:	f7ff ff59 	bl	8002efc <__sflush_r>
 800304a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800304c:	07da      	lsls	r2, r3, #31
 800304e:	4605      	mov	r5, r0
 8003050:	d4e0      	bmi.n	8003014 <_fflush_r+0xc>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	059b      	lsls	r3, r3, #22
 8003056:	d4dd      	bmi.n	8003014 <_fflush_r+0xc>
 8003058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800305a:	f000 f908 	bl	800326e <__retarget_lock_release_recursive>
 800305e:	e7d9      	b.n	8003014 <_fflush_r+0xc>
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <_fflush_r+0x70>)
 8003062:	429c      	cmp	r4, r3
 8003064:	d101      	bne.n	800306a <_fflush_r+0x62>
 8003066:	68ac      	ldr	r4, [r5, #8]
 8003068:	e7df      	b.n	800302a <_fflush_r+0x22>
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <_fflush_r+0x74>)
 800306c:	429c      	cmp	r4, r3
 800306e:	bf08      	it	eq
 8003070:	68ec      	ldreq	r4, [r5, #12]
 8003072:	e7da      	b.n	800302a <_fflush_r+0x22>
 8003074:	080036a0 	.word	0x080036a0
 8003078:	080036c0 	.word	0x080036c0
 800307c:	08003680 	.word	0x08003680

08003080 <std>:
 8003080:	2300      	movs	r3, #0
 8003082:	b510      	push	{r4, lr}
 8003084:	4604      	mov	r4, r0
 8003086:	e9c0 3300 	strd	r3, r3, [r0]
 800308a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800308e:	6083      	str	r3, [r0, #8]
 8003090:	8181      	strh	r1, [r0, #12]
 8003092:	6643      	str	r3, [r0, #100]	; 0x64
 8003094:	81c2      	strh	r2, [r0, #14]
 8003096:	6183      	str	r3, [r0, #24]
 8003098:	4619      	mov	r1, r3
 800309a:	2208      	movs	r2, #8
 800309c:	305c      	adds	r0, #92	; 0x5c
 800309e:	f7ff fdef 	bl	8002c80 <memset>
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <std+0x38>)
 80030a4:	6263      	str	r3, [r4, #36]	; 0x24
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <std+0x3c>)
 80030a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <std+0x40>)
 80030ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <std+0x44>)
 80030b0:	6224      	str	r4, [r4, #32]
 80030b2:	6323      	str	r3, [r4, #48]	; 0x30
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	bf00      	nop
 80030b8:	080034ad 	.word	0x080034ad
 80030bc:	080034cf 	.word	0x080034cf
 80030c0:	08003507 	.word	0x08003507
 80030c4:	0800352b 	.word	0x0800352b

080030c8 <_cleanup_r>:
 80030c8:	4901      	ldr	r1, [pc, #4]	; (80030d0 <_cleanup_r+0x8>)
 80030ca:	f000 b8af 	b.w	800322c <_fwalk_reent>
 80030ce:	bf00      	nop
 80030d0:	08003009 	.word	0x08003009

080030d4 <__sfmoreglue>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	1e4a      	subs	r2, r1, #1
 80030d8:	2568      	movs	r5, #104	; 0x68
 80030da:	4355      	muls	r5, r2
 80030dc:	460e      	mov	r6, r1
 80030de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030e2:	f000 f979 	bl	80033d8 <_malloc_r>
 80030e6:	4604      	mov	r4, r0
 80030e8:	b140      	cbz	r0, 80030fc <__sfmoreglue+0x28>
 80030ea:	2100      	movs	r1, #0
 80030ec:	e9c0 1600 	strd	r1, r6, [r0]
 80030f0:	300c      	adds	r0, #12
 80030f2:	60a0      	str	r0, [r4, #8]
 80030f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030f8:	f7ff fdc2 	bl	8002c80 <memset>
 80030fc:	4620      	mov	r0, r4
 80030fe:	bd70      	pop	{r4, r5, r6, pc}

08003100 <__sfp_lock_acquire>:
 8003100:	4801      	ldr	r0, [pc, #4]	; (8003108 <__sfp_lock_acquire+0x8>)
 8003102:	f000 b8b3 	b.w	800326c <__retarget_lock_acquire_recursive>
 8003106:	bf00      	nop
 8003108:	2000017c 	.word	0x2000017c

0800310c <__sfp_lock_release>:
 800310c:	4801      	ldr	r0, [pc, #4]	; (8003114 <__sfp_lock_release+0x8>)
 800310e:	f000 b8ae 	b.w	800326e <__retarget_lock_release_recursive>
 8003112:	bf00      	nop
 8003114:	2000017c 	.word	0x2000017c

08003118 <__sinit_lock_acquire>:
 8003118:	4801      	ldr	r0, [pc, #4]	; (8003120 <__sinit_lock_acquire+0x8>)
 800311a:	f000 b8a7 	b.w	800326c <__retarget_lock_acquire_recursive>
 800311e:	bf00      	nop
 8003120:	20000177 	.word	0x20000177

08003124 <__sinit_lock_release>:
 8003124:	4801      	ldr	r0, [pc, #4]	; (800312c <__sinit_lock_release+0x8>)
 8003126:	f000 b8a2 	b.w	800326e <__retarget_lock_release_recursive>
 800312a:	bf00      	nop
 800312c:	20000177 	.word	0x20000177

08003130 <__sinit>:
 8003130:	b510      	push	{r4, lr}
 8003132:	4604      	mov	r4, r0
 8003134:	f7ff fff0 	bl	8003118 <__sinit_lock_acquire>
 8003138:	69a3      	ldr	r3, [r4, #24]
 800313a:	b11b      	cbz	r3, 8003144 <__sinit+0x14>
 800313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003140:	f7ff bff0 	b.w	8003124 <__sinit_lock_release>
 8003144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003148:	6523      	str	r3, [r4, #80]	; 0x50
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <__sinit+0x68>)
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <__sinit+0x6c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	62a2      	str	r2, [r4, #40]	; 0x28
 8003152:	42a3      	cmp	r3, r4
 8003154:	bf04      	itt	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	61a3      	streq	r3, [r4, #24]
 800315a:	4620      	mov	r0, r4
 800315c:	f000 f820 	bl	80031a0 <__sfp>
 8003160:	6060      	str	r0, [r4, #4]
 8003162:	4620      	mov	r0, r4
 8003164:	f000 f81c 	bl	80031a0 <__sfp>
 8003168:	60a0      	str	r0, [r4, #8]
 800316a:	4620      	mov	r0, r4
 800316c:	f000 f818 	bl	80031a0 <__sfp>
 8003170:	2200      	movs	r2, #0
 8003172:	60e0      	str	r0, [r4, #12]
 8003174:	2104      	movs	r1, #4
 8003176:	6860      	ldr	r0, [r4, #4]
 8003178:	f7ff ff82 	bl	8003080 <std>
 800317c:	68a0      	ldr	r0, [r4, #8]
 800317e:	2201      	movs	r2, #1
 8003180:	2109      	movs	r1, #9
 8003182:	f7ff ff7d 	bl	8003080 <std>
 8003186:	68e0      	ldr	r0, [r4, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	2112      	movs	r1, #18
 800318c:	f7ff ff78 	bl	8003080 <std>
 8003190:	2301      	movs	r3, #1
 8003192:	61a3      	str	r3, [r4, #24]
 8003194:	e7d2      	b.n	800313c <__sinit+0xc>
 8003196:	bf00      	nop
 8003198:	0800367c 	.word	0x0800367c
 800319c:	080030c9 	.word	0x080030c9

080031a0 <__sfp>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	4607      	mov	r7, r0
 80031a4:	f7ff ffac 	bl	8003100 <__sfp_lock_acquire>
 80031a8:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <__sfp+0x84>)
 80031aa:	681e      	ldr	r6, [r3, #0]
 80031ac:	69b3      	ldr	r3, [r6, #24]
 80031ae:	b913      	cbnz	r3, 80031b6 <__sfp+0x16>
 80031b0:	4630      	mov	r0, r6
 80031b2:	f7ff ffbd 	bl	8003130 <__sinit>
 80031b6:	3648      	adds	r6, #72	; 0x48
 80031b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031bc:	3b01      	subs	r3, #1
 80031be:	d503      	bpl.n	80031c8 <__sfp+0x28>
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	b30b      	cbz	r3, 8003208 <__sfp+0x68>
 80031c4:	6836      	ldr	r6, [r6, #0]
 80031c6:	e7f7      	b.n	80031b8 <__sfp+0x18>
 80031c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031cc:	b9d5      	cbnz	r5, 8003204 <__sfp+0x64>
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <__sfp+0x88>)
 80031d0:	60e3      	str	r3, [r4, #12]
 80031d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031d6:	6665      	str	r5, [r4, #100]	; 0x64
 80031d8:	f000 f847 	bl	800326a <__retarget_lock_init_recursive>
 80031dc:	f7ff ff96 	bl	800310c <__sfp_lock_release>
 80031e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031e8:	6025      	str	r5, [r4, #0]
 80031ea:	61a5      	str	r5, [r4, #24]
 80031ec:	2208      	movs	r2, #8
 80031ee:	4629      	mov	r1, r5
 80031f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031f4:	f7ff fd44 	bl	8002c80 <memset>
 80031f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003200:	4620      	mov	r0, r4
 8003202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003204:	3468      	adds	r4, #104	; 0x68
 8003206:	e7d9      	b.n	80031bc <__sfp+0x1c>
 8003208:	2104      	movs	r1, #4
 800320a:	4638      	mov	r0, r7
 800320c:	f7ff ff62 	bl	80030d4 <__sfmoreglue>
 8003210:	4604      	mov	r4, r0
 8003212:	6030      	str	r0, [r6, #0]
 8003214:	2800      	cmp	r0, #0
 8003216:	d1d5      	bne.n	80031c4 <__sfp+0x24>
 8003218:	f7ff ff78 	bl	800310c <__sfp_lock_release>
 800321c:	230c      	movs	r3, #12
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	e7ee      	b.n	8003200 <__sfp+0x60>
 8003222:	bf00      	nop
 8003224:	0800367c 	.word	0x0800367c
 8003228:	ffff0001 	.word	0xffff0001

0800322c <_fwalk_reent>:
 800322c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003230:	4606      	mov	r6, r0
 8003232:	4688      	mov	r8, r1
 8003234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003238:	2700      	movs	r7, #0
 800323a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800323e:	f1b9 0901 	subs.w	r9, r9, #1
 8003242:	d505      	bpl.n	8003250 <_fwalk_reent+0x24>
 8003244:	6824      	ldr	r4, [r4, #0]
 8003246:	2c00      	cmp	r4, #0
 8003248:	d1f7      	bne.n	800323a <_fwalk_reent+0xe>
 800324a:	4638      	mov	r0, r7
 800324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003250:	89ab      	ldrh	r3, [r5, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d907      	bls.n	8003266 <_fwalk_reent+0x3a>
 8003256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800325a:	3301      	adds	r3, #1
 800325c:	d003      	beq.n	8003266 <_fwalk_reent+0x3a>
 800325e:	4629      	mov	r1, r5
 8003260:	4630      	mov	r0, r6
 8003262:	47c0      	blx	r8
 8003264:	4307      	orrs	r7, r0
 8003266:	3568      	adds	r5, #104	; 0x68
 8003268:	e7e9      	b.n	800323e <_fwalk_reent+0x12>

0800326a <__retarget_lock_init_recursive>:
 800326a:	4770      	bx	lr

0800326c <__retarget_lock_acquire_recursive>:
 800326c:	4770      	bx	lr

0800326e <__retarget_lock_release_recursive>:
 800326e:	4770      	bx	lr

08003270 <__swhatbuf_r>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	460e      	mov	r6, r1
 8003274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003278:	2900      	cmp	r1, #0
 800327a:	b096      	sub	sp, #88	; 0x58
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
 8003280:	da07      	bge.n	8003292 <__swhatbuf_r+0x22>
 8003282:	2300      	movs	r3, #0
 8003284:	602b      	str	r3, [r5, #0]
 8003286:	89b3      	ldrh	r3, [r6, #12]
 8003288:	061a      	lsls	r2, r3, #24
 800328a:	d410      	bmi.n	80032ae <__swhatbuf_r+0x3e>
 800328c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003290:	e00e      	b.n	80032b0 <__swhatbuf_r+0x40>
 8003292:	466a      	mov	r2, sp
 8003294:	f000 f970 	bl	8003578 <_fstat_r>
 8003298:	2800      	cmp	r0, #0
 800329a:	dbf2      	blt.n	8003282 <__swhatbuf_r+0x12>
 800329c:	9a01      	ldr	r2, [sp, #4]
 800329e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032a6:	425a      	negs	r2, r3
 80032a8:	415a      	adcs	r2, r3
 80032aa:	602a      	str	r2, [r5, #0]
 80032ac:	e7ee      	b.n	800328c <__swhatbuf_r+0x1c>
 80032ae:	2340      	movs	r3, #64	; 0x40
 80032b0:	2000      	movs	r0, #0
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	b016      	add	sp, #88	; 0x58
 80032b6:	bd70      	pop	{r4, r5, r6, pc}

080032b8 <__smakebuf_r>:
 80032b8:	898b      	ldrh	r3, [r1, #12]
 80032ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032bc:	079d      	lsls	r5, r3, #30
 80032be:	4606      	mov	r6, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	d507      	bpl.n	80032d4 <__smakebuf_r+0x1c>
 80032c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	6123      	str	r3, [r4, #16]
 80032cc:	2301      	movs	r3, #1
 80032ce:	6163      	str	r3, [r4, #20]
 80032d0:	b002      	add	sp, #8
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	ab01      	add	r3, sp, #4
 80032d6:	466a      	mov	r2, sp
 80032d8:	f7ff ffca 	bl	8003270 <__swhatbuf_r>
 80032dc:	9900      	ldr	r1, [sp, #0]
 80032de:	4605      	mov	r5, r0
 80032e0:	4630      	mov	r0, r6
 80032e2:	f000 f879 	bl	80033d8 <_malloc_r>
 80032e6:	b948      	cbnz	r0, 80032fc <__smakebuf_r+0x44>
 80032e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ec:	059a      	lsls	r2, r3, #22
 80032ee:	d4ef      	bmi.n	80032d0 <__smakebuf_r+0x18>
 80032f0:	f023 0303 	bic.w	r3, r3, #3
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	e7e3      	b.n	80032c4 <__smakebuf_r+0xc>
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <__smakebuf_r+0x7c>)
 80032fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	6020      	str	r0, [r4, #0]
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	9b00      	ldr	r3, [sp, #0]
 800330c:	6163      	str	r3, [r4, #20]
 800330e:	9b01      	ldr	r3, [sp, #4]
 8003310:	6120      	str	r0, [r4, #16]
 8003312:	b15b      	cbz	r3, 800332c <__smakebuf_r+0x74>
 8003314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003318:	4630      	mov	r0, r6
 800331a:	f000 f93f 	bl	800359c <_isatty_r>
 800331e:	b128      	cbz	r0, 800332c <__smakebuf_r+0x74>
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	81a3      	strh	r3, [r4, #12]
 800332c:	89a0      	ldrh	r0, [r4, #12]
 800332e:	4305      	orrs	r5, r0
 8003330:	81a5      	strh	r5, [r4, #12]
 8003332:	e7cd      	b.n	80032d0 <__smakebuf_r+0x18>
 8003334:	080030c9 	.word	0x080030c9

08003338 <_free_r>:
 8003338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800333a:	2900      	cmp	r1, #0
 800333c:	d048      	beq.n	80033d0 <_free_r+0x98>
 800333e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003342:	9001      	str	r0, [sp, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f1a1 0404 	sub.w	r4, r1, #4
 800334a:	bfb8      	it	lt
 800334c:	18e4      	addlt	r4, r4, r3
 800334e:	f000 f947 	bl	80035e0 <__malloc_lock>
 8003352:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <_free_r+0x9c>)
 8003354:	9801      	ldr	r0, [sp, #4]
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	4615      	mov	r5, r2
 800335a:	b933      	cbnz	r3, 800336a <_free_r+0x32>
 800335c:	6063      	str	r3, [r4, #4]
 800335e:	6014      	str	r4, [r2, #0]
 8003360:	b003      	add	sp, #12
 8003362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003366:	f000 b941 	b.w	80035ec <__malloc_unlock>
 800336a:	42a3      	cmp	r3, r4
 800336c:	d90b      	bls.n	8003386 <_free_r+0x4e>
 800336e:	6821      	ldr	r1, [r4, #0]
 8003370:	1862      	adds	r2, r4, r1
 8003372:	4293      	cmp	r3, r2
 8003374:	bf04      	itt	eq
 8003376:	681a      	ldreq	r2, [r3, #0]
 8003378:	685b      	ldreq	r3, [r3, #4]
 800337a:	6063      	str	r3, [r4, #4]
 800337c:	bf04      	itt	eq
 800337e:	1852      	addeq	r2, r2, r1
 8003380:	6022      	streq	r2, [r4, #0]
 8003382:	602c      	str	r4, [r5, #0]
 8003384:	e7ec      	b.n	8003360 <_free_r+0x28>
 8003386:	461a      	mov	r2, r3
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	b10b      	cbz	r3, 8003390 <_free_r+0x58>
 800338c:	42a3      	cmp	r3, r4
 800338e:	d9fa      	bls.n	8003386 <_free_r+0x4e>
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	1855      	adds	r5, r2, r1
 8003394:	42a5      	cmp	r5, r4
 8003396:	d10b      	bne.n	80033b0 <_free_r+0x78>
 8003398:	6824      	ldr	r4, [r4, #0]
 800339a:	4421      	add	r1, r4
 800339c:	1854      	adds	r4, r2, r1
 800339e:	42a3      	cmp	r3, r4
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	d1dd      	bne.n	8003360 <_free_r+0x28>
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	6053      	str	r3, [r2, #4]
 80033aa:	4421      	add	r1, r4
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	e7d7      	b.n	8003360 <_free_r+0x28>
 80033b0:	d902      	bls.n	80033b8 <_free_r+0x80>
 80033b2:	230c      	movs	r3, #12
 80033b4:	6003      	str	r3, [r0, #0]
 80033b6:	e7d3      	b.n	8003360 <_free_r+0x28>
 80033b8:	6825      	ldr	r5, [r4, #0]
 80033ba:	1961      	adds	r1, r4, r5
 80033bc:	428b      	cmp	r3, r1
 80033be:	bf04      	itt	eq
 80033c0:	6819      	ldreq	r1, [r3, #0]
 80033c2:	685b      	ldreq	r3, [r3, #4]
 80033c4:	6063      	str	r3, [r4, #4]
 80033c6:	bf04      	itt	eq
 80033c8:	1949      	addeq	r1, r1, r5
 80033ca:	6021      	streq	r1, [r4, #0]
 80033cc:	6054      	str	r4, [r2, #4]
 80033ce:	e7c7      	b.n	8003360 <_free_r+0x28>
 80033d0:	b003      	add	sp, #12
 80033d2:	bd30      	pop	{r4, r5, pc}
 80033d4:	20000094 	.word	0x20000094

080033d8 <_malloc_r>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	1ccd      	adds	r5, r1, #3
 80033dc:	f025 0503 	bic.w	r5, r5, #3
 80033e0:	3508      	adds	r5, #8
 80033e2:	2d0c      	cmp	r5, #12
 80033e4:	bf38      	it	cc
 80033e6:	250c      	movcc	r5, #12
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	4606      	mov	r6, r0
 80033ec:	db01      	blt.n	80033f2 <_malloc_r+0x1a>
 80033ee:	42a9      	cmp	r1, r5
 80033f0:	d903      	bls.n	80033fa <_malloc_r+0x22>
 80033f2:	230c      	movs	r3, #12
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	2000      	movs	r0, #0
 80033f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fa:	f000 f8f1 	bl	80035e0 <__malloc_lock>
 80033fe:	4921      	ldr	r1, [pc, #132]	; (8003484 <_malloc_r+0xac>)
 8003400:	680a      	ldr	r2, [r1, #0]
 8003402:	4614      	mov	r4, r2
 8003404:	b99c      	cbnz	r4, 800342e <_malloc_r+0x56>
 8003406:	4f20      	ldr	r7, [pc, #128]	; (8003488 <_malloc_r+0xb0>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b923      	cbnz	r3, 8003416 <_malloc_r+0x3e>
 800340c:	4621      	mov	r1, r4
 800340e:	4630      	mov	r0, r6
 8003410:	f000 f83c 	bl	800348c <_sbrk_r>
 8003414:	6038      	str	r0, [r7, #0]
 8003416:	4629      	mov	r1, r5
 8003418:	4630      	mov	r0, r6
 800341a:	f000 f837 	bl	800348c <_sbrk_r>
 800341e:	1c43      	adds	r3, r0, #1
 8003420:	d123      	bne.n	800346a <_malloc_r+0x92>
 8003422:	230c      	movs	r3, #12
 8003424:	6033      	str	r3, [r6, #0]
 8003426:	4630      	mov	r0, r6
 8003428:	f000 f8e0 	bl	80035ec <__malloc_unlock>
 800342c:	e7e3      	b.n	80033f6 <_malloc_r+0x1e>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	1b5b      	subs	r3, r3, r5
 8003432:	d417      	bmi.n	8003464 <_malloc_r+0x8c>
 8003434:	2b0b      	cmp	r3, #11
 8003436:	d903      	bls.n	8003440 <_malloc_r+0x68>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	441c      	add	r4, r3
 800343c:	6025      	str	r5, [r4, #0]
 800343e:	e004      	b.n	800344a <_malloc_r+0x72>
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	42a2      	cmp	r2, r4
 8003444:	bf0c      	ite	eq
 8003446:	600b      	streq	r3, [r1, #0]
 8003448:	6053      	strne	r3, [r2, #4]
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f8ce 	bl	80035ec <__malloc_unlock>
 8003450:	f104 000b 	add.w	r0, r4, #11
 8003454:	1d23      	adds	r3, r4, #4
 8003456:	f020 0007 	bic.w	r0, r0, #7
 800345a:	1ac2      	subs	r2, r0, r3
 800345c:	d0cc      	beq.n	80033f8 <_malloc_r+0x20>
 800345e:	1a1b      	subs	r3, r3, r0
 8003460:	50a3      	str	r3, [r4, r2]
 8003462:	e7c9      	b.n	80033f8 <_malloc_r+0x20>
 8003464:	4622      	mov	r2, r4
 8003466:	6864      	ldr	r4, [r4, #4]
 8003468:	e7cc      	b.n	8003404 <_malloc_r+0x2c>
 800346a:	1cc4      	adds	r4, r0, #3
 800346c:	f024 0403 	bic.w	r4, r4, #3
 8003470:	42a0      	cmp	r0, r4
 8003472:	d0e3      	beq.n	800343c <_malloc_r+0x64>
 8003474:	1a21      	subs	r1, r4, r0
 8003476:	4630      	mov	r0, r6
 8003478:	f000 f808 	bl	800348c <_sbrk_r>
 800347c:	3001      	adds	r0, #1
 800347e:	d1dd      	bne.n	800343c <_malloc_r+0x64>
 8003480:	e7cf      	b.n	8003422 <_malloc_r+0x4a>
 8003482:	bf00      	nop
 8003484:	20000094 	.word	0x20000094
 8003488:	20000098 	.word	0x20000098

0800348c <_sbrk_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4d06      	ldr	r5, [pc, #24]	; (80034a8 <_sbrk_r+0x1c>)
 8003490:	2300      	movs	r3, #0
 8003492:	4604      	mov	r4, r0
 8003494:	4608      	mov	r0, r1
 8003496:	602b      	str	r3, [r5, #0]
 8003498:	f7fd fcc6 	bl	8000e28 <_sbrk>
 800349c:	1c43      	adds	r3, r0, #1
 800349e:	d102      	bne.n	80034a6 <_sbrk_r+0x1a>
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	b103      	cbz	r3, 80034a6 <_sbrk_r+0x1a>
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	bd38      	pop	{r3, r4, r5, pc}
 80034a8:	20000180 	.word	0x20000180

080034ac <__sread>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	460c      	mov	r4, r1
 80034b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b4:	f000 f8a0 	bl	80035f8 <_read_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	bfab      	itete	ge
 80034bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034be:	89a3      	ldrhlt	r3, [r4, #12]
 80034c0:	181b      	addge	r3, r3, r0
 80034c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034c6:	bfac      	ite	ge
 80034c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ca:	81a3      	strhlt	r3, [r4, #12]
 80034cc:	bd10      	pop	{r4, pc}

080034ce <__swrite>:
 80034ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d2:	461f      	mov	r7, r3
 80034d4:	898b      	ldrh	r3, [r1, #12]
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	4605      	mov	r5, r0
 80034da:	460c      	mov	r4, r1
 80034dc:	4616      	mov	r6, r2
 80034de:	d505      	bpl.n	80034ec <__swrite+0x1e>
 80034e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e4:	2302      	movs	r3, #2
 80034e6:	2200      	movs	r2, #0
 80034e8:	f000 f868 	bl	80035bc <_lseek_r>
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f6:	81a3      	strh	r3, [r4, #12]
 80034f8:	4632      	mov	r2, r6
 80034fa:	463b      	mov	r3, r7
 80034fc:	4628      	mov	r0, r5
 80034fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003502:	f000 b817 	b.w	8003534 <_write_r>

08003506 <__sseek>:
 8003506:	b510      	push	{r4, lr}
 8003508:	460c      	mov	r4, r1
 800350a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800350e:	f000 f855 	bl	80035bc <_lseek_r>
 8003512:	1c43      	adds	r3, r0, #1
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	bf15      	itete	ne
 8003518:	6560      	strne	r0, [r4, #84]	; 0x54
 800351a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800351e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003522:	81a3      	strheq	r3, [r4, #12]
 8003524:	bf18      	it	ne
 8003526:	81a3      	strhne	r3, [r4, #12]
 8003528:	bd10      	pop	{r4, pc}

0800352a <__sclose>:
 800352a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352e:	f000 b813 	b.w	8003558 <_close_r>
	...

08003534 <_write_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4d07      	ldr	r5, [pc, #28]	; (8003554 <_write_r+0x20>)
 8003538:	4604      	mov	r4, r0
 800353a:	4608      	mov	r0, r1
 800353c:	4611      	mov	r1, r2
 800353e:	2200      	movs	r2, #0
 8003540:	602a      	str	r2, [r5, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f7fd f8fe 	bl	8000744 <_write>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_write_r+0x1e>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_write_r+0x1e>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	20000180 	.word	0x20000180

08003558 <_close_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4d06      	ldr	r5, [pc, #24]	; (8003574 <_close_r+0x1c>)
 800355c:	2300      	movs	r3, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	f7fd fc2b 	bl	8000dbe <_close>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_close_r+0x1a>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_close_r+0x1a>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000180 	.word	0x20000180

08003578 <_fstat_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4d07      	ldr	r5, [pc, #28]	; (8003598 <_fstat_r+0x20>)
 800357c:	2300      	movs	r3, #0
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	f7fd fc26 	bl	8000dd6 <_fstat>
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	d102      	bne.n	8003594 <_fstat_r+0x1c>
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	b103      	cbz	r3, 8003594 <_fstat_r+0x1c>
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	bf00      	nop
 8003598:	20000180 	.word	0x20000180

0800359c <_isatty_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d06      	ldr	r5, [pc, #24]	; (80035b8 <_isatty_r+0x1c>)
 80035a0:	2300      	movs	r3, #0
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fd fc25 	bl	8000df6 <_isatty>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_isatty_r+0x1a>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_isatty_r+0x1a>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000180 	.word	0x20000180

080035bc <_lseek_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4d07      	ldr	r5, [pc, #28]	; (80035dc <_lseek_r+0x20>)
 80035c0:	4604      	mov	r4, r0
 80035c2:	4608      	mov	r0, r1
 80035c4:	4611      	mov	r1, r2
 80035c6:	2200      	movs	r2, #0
 80035c8:	602a      	str	r2, [r5, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f7fd fc1e 	bl	8000e0c <_lseek>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_lseek_r+0x1e>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_lseek_r+0x1e>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	20000180 	.word	0x20000180

080035e0 <__malloc_lock>:
 80035e0:	4801      	ldr	r0, [pc, #4]	; (80035e8 <__malloc_lock+0x8>)
 80035e2:	f7ff be43 	b.w	800326c <__retarget_lock_acquire_recursive>
 80035e6:	bf00      	nop
 80035e8:	20000178 	.word	0x20000178

080035ec <__malloc_unlock>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__malloc_unlock+0x8>)
 80035ee:	f7ff be3e 	b.w	800326e <__retarget_lock_release_recursive>
 80035f2:	bf00      	nop
 80035f4:	20000178 	.word	0x20000178

080035f8 <_read_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4d07      	ldr	r5, [pc, #28]	; (8003618 <_read_r+0x20>)
 80035fc:	4604      	mov	r4, r0
 80035fe:	4608      	mov	r0, r1
 8003600:	4611      	mov	r1, r2
 8003602:	2200      	movs	r2, #0
 8003604:	602a      	str	r2, [r5, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	f7fd fbbc 	bl	8000d84 <_read>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d102      	bne.n	8003616 <_read_r+0x1e>
 8003610:	682b      	ldr	r3, [r5, #0]
 8003612:	b103      	cbz	r3, 8003616 <_read_r+0x1e>
 8003614:	6023      	str	r3, [r4, #0]
 8003616:	bd38      	pop	{r3, r4, r5, pc}
 8003618:	20000180 	.word	0x20000180

0800361c <_init>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	bf00      	nop
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr

08003628 <_fini>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr
